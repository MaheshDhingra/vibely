generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  clerkId       String         @unique
  username      String         @unique
  email         String         @unique
  name          String?
  bio           String?
  profileImage  String?
  password      String?
  posts         Post[]         @relation("UserPosts")
  comments      Comment[]
  likes         Like[]
  stories       Story[]
  highlights    Highlight[]
  messagesSent  Message[]      @relation("MessagesSent")
  messagesRecv  Message[]      @relation("MessagesReceived")
  reels         Reel[]
  notifications Notification[]
  followers     Follow[]       @relation("Followers")
  following     Follow[]       @relation("Following")
  reelLikes     ReelLike[] // Added to fix the reverse relation for ReelLike
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  caption   String?
  imageUrl  String
  user      User      @relation("UserPosts", fields: [userId], references: [id])
  userId    String
  comments  Comment[]
  likes     Like[]
  hashtags  Hashtag[] // Implicit many-to-many; no extra @relation needed
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Story {
  id         String      @id @default(cuid())
  imageUrl   String
  caption    String?
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  expiresAt  DateTime
  createdAt  DateTime    @default(now())
  highlights Highlight[] @relation("HighlightStories")
}

model Highlight {
  id        String   @id @default(cuid())
  title     String
  coverUrl  String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  stories   Story[]  @relation("HighlightStories")
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
}

model Reel {
  id        String     @id @default(cuid())
  videoUrl  String
  caption   String?
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  reelLikes ReelLike[]
  hashtags  Hashtag[] // Implicit many-to-many; no extra @relation needed
  createdAt DateTime   @default(now())
}

model ReelLike {
  id        String   @id @default(cuid())
  reel      Reel     @relation(fields: [reelId], references: [id])
  reelId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([reelId, userId])
}

model Hashtag {
  id    String @id @default(cuid())
  tag   String @unique
  posts Post[]
  reels Reel[]
}

model Notification {
  id        String   @id @default(cuid())
  type      String // e.g. "like", "comment", "follow", "message", etc.
  message   String
  user      User     @relation(fields: [userId], references: [id]) // Recipient
  userId    String
  actorId   String // Who triggered the notification
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
